import getpass

class ATM:
    def __init__(self, balance=0, pin="0000"):
        """This method initializes the ATM's state with the provided balance and PIN."""
        self.balance = balance
        self.pin = pin
        self.transaction_history = []

    def check_balance(self):
        """It displays the current balance and logs it as a transaction."""
        print(f"Your current balance is: ${self.balance}")
        self.transaction_history.append("Checked balance")

    def deposit_cash(self, amount):
        """This function adds the deposited amount to the balance if valid and logs it as a transaction."""
        if amount > 0:
            self.balance += amount
            print(f"${amount} deposited successfully.")
            self.transaction_history.append(f"Deposited ${amount}")
        else:
            print("Invalid deposit amount.")

    def withdraw_cash(self, amount):
        """It deducts the withdrawal amount from the balance if sufficient funds are available and logs it as a transaction."""
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            print(f"${amount} withdrawn successfully.")
            self.transaction_history.append(f"Withdrew ${amount}")
        else:
            print("Invalid or insufficient funds for withdrawal.")

    def change_pin(self, old_pin, new_pin):
        """This method changes the PIN if the old PIN is correct and logs it as a transaction."""
        if old_pin == self.pin:
            self.pin = new_pin
            print("PIN changed successfully.")
            self.transaction_history.append("Changed PIN")
        else:
            print("Incorrect old PIN.")

    def print_transaction_history(self):
        """It shows the transaction history."""
        print("Transaction History:")
        for transaction in self.transaction_history:
            print(transaction)

def main():
    """This script creates an instance of the ATM class with an initial balance of $1000 and a default PIN.
    It then presents a menu to the user to interact with the ATM. Based on user input, it invokes corresponding methods on the ATM instance."""
    atm = ATM(balance=1000, pin="1234")
    
    while True:
        print("\nATM Machine")
        print("1. Check Balance")
        print("2. Deposit Cash")
        print("3. Withdraw Cash")
        print("4. Change PIN")
        print("5. Transaction History")
        print("6. Exit")
        
        choice = input("Enter your choice: ")
        
        if choice == '1':
            atm.check_balance()
        
        elif choice == '2':
            amount = float(input("Enter amount to deposit: "))
            atm.deposit_cash(amount)
        
        elif choice == '3':
            amount = float(input("Enter amount to withdraw: "))
            atm.withdraw_cash(amount)
        
        elif choice == '4':
            old_pin = getpass.getpass("Enter old PIN: ")
            new_pin = getpass.getpass("Enter new PIN: ")
            atm.change_pin(old_pin, new_pin)
        
        elif choice == '5':
            atm.print_transaction_history()
        
        elif choice == '6':
            print("Exiting... Thank you for using the ATM.")
            break
        
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    """How to Run:
    Save this script to a file, e.g., atm_simulation.py.
    Run the script:
    python atm_simulation.py
    
    Usage:
    Check Balance: Displays the current account balance.
    Deposit Cash: Updates the balance after asking the user for a deposit amount.
    Withdraw Cash: Asks for a withdrawal amount and updates the balance if enough funds are available.
    Change PIN: Requests old and new PINs, changing the PIN if the old one is correct.
    Transaction History: Shows the history of all transactions.
    Exit: Quits the ATM simulation
    
    This script offers a simple yet functional ATM interface. Additional features can be added as needed."""
    main()
